1.在负载均衡服务器上的eth0网卡子接口上添加一个VIP(24是子网掩码的简写255.255.255.0)
ifconfig eth0:2 192.168.3.100/24
 如果想删除子接口：ifconfig eth0:2 down

2.在rsever 上设置隐藏vip之前需要调整协议
   cd /proc/sys/net/ipv4/conf/eth0

  修改arp_ignore和arp_announce

  1.1 修改arp_ignore的响应级别 echo 1 > arp_ignore
  1.2 修改arp_announce的响应级别 echo 2 > arp_announce


  cd cd /proc/sys/net/ipv4/conf/all

   1.1 修改arp_ignore的响应级别 echo 1 > arp_ignore
   1.2 修改arp_announce的响应级别 echo 2 > arp_announce

 3.设置隐藏vip
  ifconfig lo:2 192.168.3.100 netmask 255.255.255.255  (注意这里的子网掩码一定是4个255)

4. rserver上安装
   yum install httpd -y
  	service httpd start

   vim /var/www/html/index.html

   echo "xccxcxc" > index.html

 5.在负载均衡服务器上安装
   yum install -y ipvsadm

  设置数据包进来得规则：ipvsadm -A  -t  192.168.3.100:80  -s rr
   (-A 表示数据包进来，-t 是TCP协议 -s后面跟上静态调度规则 rr 表示轮询)

   设置数据包出去规则：ipvsadm -a  -t 192.168.3.100:80  -r  192.168.3.102 -g -w 1
     （-a 表示数据包出去， -t 表示tcp协议 -r 表示真实服务器地址， -g表示LVS的DR模型，-w 权重 ）



-----------------------------------------------------------------------------------

LVS：

node01:
	ifconfig  eth0:8 192.168.150.100/24
node02~node03:
	1)修改内核：
		echo 1  >  /proc/sys/net/ipv4/conf/eno16777728/arp_ignore
		echo 1  >  /proc/sys/net/ipv4/conf/all/arp_ignore
		echo 2 > /proc/sys/net/ipv4/conf/eno16777728/arp_announce
		echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce
	2）设置隐藏的vip：
		ifconfig  lo:3  192.168.150.100  netmask 255.255.255.255

RS中的服务：
node02~node03:
	yum install httpd -y
	service httpd start
	vi   /var/www/html/index.html
		from 192.168.150.1x

LVS服务配置
node01:
		yum install ipvsadm
	ipvsadm -A  -t  192.168.3.100:80  -s rr
	ipvsadm -a  -t 192.168.3.100:80  -r  192.168.3.102 -g -w 1
	ipvsadm -a  -t 192.168.3.100:80  -r  192.168.3.103 -g -w 1
	ipvsadm -ln

验证：
	浏览器访问  192.168.150.100   看到负载  疯狂F5
	node01：
		netstat -natp   结论看不到socket连接
	node02~node03:
		netstat -natp   结论看到很多的socket连接
	node01:
		ipvsadm -lnc    查看偷窥记录本
		TCP 00:57  FIN_WAIT    192.168.150.1:51587 192.168.150.100:80 192.168.150.12:80
		FIN_WAIT： 连接过，偷窥了所有的包
		SYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题



SYN_RECV：服务端收到建立连接的SYN没有收到ACK包的时候处在SYN_RECV状态
CLOSE_WAIT：发起TCP连接关闭的一方称为client，被动关闭的一方称为server。被动关闭的server收到FIN后，但未发出ACK的TCP状态是CLOSE_WAIT，出现这种状况一般都是由于server端代码的问题，如果你的服务器上出现大量CLOSE_WAIT，应该要考虑检查代码

最核心的两个点：TCP 是全双工的，以及 TCP 的传输确认机制。简单描述一下 TCP 关闭连接的四次握手过程：        假设一个客户端和服务器存在一个 TCP 连接，客户端开始执行关闭连接的操作，客户端先给服务器发送了一个 FIN 包以表示数据发送完毕，这会导致客户端的状态变成 FIN_WAIT1。由于 TCP 是全双工的，此时客户端还能接收服务器发过来的数据。
当服务器收到客户端发送的 FIN 包后发送一个 ACK 包以响应客户端的这个 FIN 包。此时服务器的状态变成 CLOSE_WAIT，客户端在收到服务器发送的 ACK 包后自己的状态变为 FIN_WAIT2。        一段时间后服务器向客户端发送一个 FIN 包，客户端收到服务器的 FIN 包并响应一个 ACK 包后进入 TIME_WAIT 状态，此时 TCP 连接完全断开。








keepalived实验：
主机： node01~node04

node01:
	ipvsadm -C
	ifconfig eth0:8 down

----------------------------
node01,node04:
	yum install keepalived ipvsadm -y
	配置：
		cd  /etc/keepalived/
		cp keepalived.conf keepalived.conf.bak
		vi keepalived.conf
			node01:
			vrrp：虚拟路由冗余协议！
				vrrp_instance VI_1 {
					state MASTER         //  node04  BACKUP
					interface eth0
					virtual_router_id 51
					priority 100		 //	 node04	 50
					advert_int 1
					authentication {
						auth_type PASS
						auth_pass 1111
					}
					virtual_ipaddress {
						192.168.150.100/24 dev eth0 label  eth0:3
					}
				}
			virtual_server 192.168.150.100 80 {
				delay_loop 6
				lb_algo rr
				lb_kind DR
				nat_mask 255.255.255.0
				persistence_timeout 0
				protocol TCP

				real_server 192.168.150.12 80 {
					weight 1
					HTTP_GET {
						url {
						  path /
						  status_code 200
						}
						connect_timeout 3
						nb_get_retry 3
						delay_before_retry 3
					}
				}
				real_server 192.168.150.13 80 {
					weight 1
					HTTP_GET {
						url {
						  path /
						  status_code 200
						}
						connect_timeout 3
						nb_get_retry 3
						delay_before_retry 3
					}
				}
			scp  ./keepalived.conf  root@node04:`pwd`




export JAVA_HOME=/opt/jdk/
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar

export JAVA_HOME=/opt/elk/jdk
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$JAVA_HOME/bin:$PATH

